# Example Nginx configuration for production deployment
# This configuration assumes:
# - Your app is served from /var/www/routerino
# - Prerender service is running on port 3000
# - SSL certificates are managed by certbot/Let's Encrypt

server {
    listen 80;
    server_name routerino.dev www.routerino.dev;
    
    # Redirect HTTP to HTTPS
    return 301 https://$server_name$request_uri;
}

server {
    listen 443 ssl http2;
    server_name routerino.dev www.routerino.dev;
    
    # SSL Configuration (managed by certbot)
    ssl_certificate /etc/letsencrypt/live/routerino.dev/fullchain.pem;
    ssl_certificate_key /etc/letsencrypt/live/routerino.dev/privkey.pem;
    include /etc/letsencrypt/options-ssl-nginx.conf;
    ssl_dhparam /etc/letsencrypt/ssl-dhparams.pem;
    
    # Root directory
    root /var/www/routerino/dist;
    index index.html;
    
    # Security headers
    add_header X-Frame-Options "SAMEORIGIN" always;
    add_header X-Content-Type-Options "nosniff" always;
    add_header X-XSS-Protection "1; mode=block" always;
    add_header Referrer-Policy "no-referrer-when-downgrade" always;
    add_header Content-Security-Policy "default-src 'self' https:; script-src 'self' 'unsafe-inline' 'unsafe-eval' https:; style-src 'self' 'unsafe-inline' https:; img-src 'self' data: https:; font-src 'self' https:; connect-src 'self' https:; media-src 'self' https:; object-src 'none'; frame-src 'self' https:; base-uri 'self'; form-action 'self' https:; frame-ancestors 'self';" always;
    
    # Gzip compression
    gzip on;
    gzip_vary on;
    gzip_min_length 10240;
    gzip_proxied expired no-cache no-store private auth;
    gzip_types text/plain text/css text/xml text/javascript application/x-javascript application/xml application/rss+xml application/javascript application/json;
    gzip_disable "MSIE [1-6]\.";
    
    # Main location block
    location / {
        try_files $uri @prerender;
    }
    
    # Prerender location
    location @prerender {
        set $prerender 0;
        
        # Check if request is from a bot
        if ($http_user_agent ~* "googlebot|bingbot|yandex|baiduspider|duckduckbot|facebookexternalhit|twitterbot|linkedinbot|embedly|quora link preview|showyoubot|outbrain|pinterest\/0\.|pinterestbot|slackbot|vkShare|W3C_Validator|whatsapp|telegram|discord") {
            set $prerender 1;
        }
        
        # Check for _escaped_fragment_ parameter
        if ($args ~ "_escaped_fragment_") {
            set $prerender 1;
        }
        
        # Always prerender for these paths (sitemap, social preview testing)
        if ($uri ~* "^/(sitemap\.xml|robots\.txt)$") {
            set $prerender 1;
        }
        
        # Don't prerender static files
        if ($uri ~* "\.(js|css|xml|less|png|jpg|jpeg|gif|pdf|doc|txt|ico|rss|zip|mp3|rar|exe|wmv|doc|avi|ppt|mpg|mpeg|tif|wav|mov|psd|ai|xls|mp4|m4a|swf|dat|dmg|iso|flv|m4v|torrent|ttf|woff|woff2|svg|eot)$") {
            set $prerender 0;
        }
        
        # Prerender if conditions are met
        if ($prerender = 1) {
            # Use HTTPS for production
            rewrite .* /https://$host$request_uri? break;
            proxy_pass http://localhost:3000;
            
            # Proxy headers
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_set_header X-Forwarded-Host $host;
            
            # Timeouts
            proxy_connect_timeout 20s;
            proxy_send_timeout 20s;
            proxy_read_timeout 20s;
            
            # Buffer settings
            proxy_buffering on;
            proxy_buffer_size 8k;
            proxy_buffers 8 8k;
            proxy_busy_buffers_size 16k;
        }
        
        # Otherwise serve the SPA
        if ($prerender = 0) {
            try_files $uri /index.html;
        }
    }
    
    # Cache static assets
    location ~* \.(js|css|png|jpg|jpeg|gif|ico|svg|woff|woff2|ttf|eot)$ {
        expires 1y;
        add_header Cache-Control "public, immutable";
        
        # Remove security headers for static assets
        add_header X-Frame-Options "" always;
        add_header X-Content-Type-Options "" always;
        add_header X-XSS-Protection "" always;
        add_header Content-Security-Policy "" always;
    }
    
    # API routes (example)
    location /api {
        # Proxy to your API server
        # proxy_pass http://localhost:3001;
        # proxy_set_header Host $host;
        # proxy_set_header X-Real-IP $remote_addr;
        # proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        # proxy_set_header X-Forwarded-Proto $scheme;
        
        # For demo purposes, return 404
        return 404;
    }
    
    # Health check endpoint
    location /health {
        access_log off;
        return 200 "healthy\n";
        add_header Content-Type text/plain;
    }
    
    # Block access to hidden files
    location ~ /\. {
        deny all;
        access_log off;
        log_not_found off;
    }
    
    # Logging
    access_log /var/log/nginx/routerino.access.log;
    error_log /var/log/nginx/routerino.error.log;
}