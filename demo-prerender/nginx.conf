events {
    worker_connections 1024;
}

http {
    include /etc/nginx/mime.types;
    default_type application/octet-stream;

    # Gzip compression
    gzip on;
    gzip_types text/plain text/css application/json application/javascript text/xml application/xml application/xml+rss text/javascript;
    
    # Logging
    access_log /var/log/nginx/access.log;
    error_log /var/log/nginx/error.log;

    server {
        listen 80;
        server_name localhost;
        root /usr/share/nginx/html;
        index index.html;

        # Security headers
        add_header X-Frame-Options "SAMEORIGIN" always;
        add_header X-Content-Type-Options "nosniff" always;
        add_header X-XSS-Protection "1; mode=block" always;

        # Main location block
        location / {
            try_files $uri @prerender;
        }

        # Prerender location
        location @prerender {
            set $prerender 0;
            
            # Check if request is from a bot that needs prerendering
            # Since PRERENDER_USER_AGENTS=all in docker-compose, this is optional
            # but kept for nginx-level control if needed
            if ($http_user_agent ~* "googlebot|bingbot|yandex|baiduspider|duckduckbot|facebookexternalhit|twitterbot|linkedinbot|embedly|quora link preview|showyoubot|outbrain|pinterest\/0\.|pinterestbot|slackbot|vkShare|W3C_Validator|whatsapp") {
                set $prerender 1;
            }
            
            # Check for _escaped_fragment_ parameter (old Google AJAX crawling scheme)
            if ($args ~ "_escaped_fragment_") {
                set $prerender 1;
            }
            
            # Don't prerender static files
            if ($uri ~* "\.(js|css|xml|less|png|jpg|jpeg|gif|pdf|doc|txt|ico|rss|zip|mp3|rar|exe|wmv|doc|avi|ppt|mpg|mpeg|tif|wav|mov|psd|ai|xls|mp4|m4a|swf|dat|dmg|iso|flv|m4v|torrent|ttf|woff|woff2|svg|eot)$") {
                set $prerender 0;
            }
            
            # Always set proxy headers (they'll only be used when proxying)
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            
            # Prerender if conditions are met
            if ($prerender = 1) {
                # Rewrite to prerender service
                rewrite .* /http://web$request_uri? break;
                proxy_pass http://prerender:3000;
            }
            
            # Otherwise serve the SPA
            try_files $uri /index.html;
        }

        # Specific handling for known static assets
        location ~* \.(js|css|png|jpg|jpeg|gif|ico|svg|woff|woff2|ttf|eot)$ {
            expires 1y;
            add_header Cache-Control "public, immutable";
        }

        # API routes (if any) - bypass prerender
        location /api {
            # Proxy to your API server if needed
            # proxy_pass http://api-server:3001;
            return 404; # For demo purposes
        }

        # Health check endpoint
        location /health {
            access_log off;
            return 200 "healthy\n";
            add_header Content-Type text/plain;
        }
    }
}